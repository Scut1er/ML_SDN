import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from flask import Flask, request, jsonify
from flask_cors import CORS
import json
from typing import Dict, Any
from models.types import ModelParameters, ParametersSettings, MLPredictionRequest, MLPredictionResponse
from services.training_service import TrainingService

app = Flask(__name__)
CORS(app)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ML –±–∞–ª–∞–Ω—Å–µ—Ä–∞
ml_balancer = None
model_path = "models/trained_model.pth"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –±–∞–ª–∞–Ω—Å–µ—Ä–∞ —Å—Ä–∞–∑—É
print("üöÄ –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –±–∞–ª–∞–Ω—Å–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è...")

def initialize_ml_balancer():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –±–∞–ª–∞–Ω—Å–µ—Ä–∞ —Å –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞"""
    global ml_balancer
    
    try:
        print(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –±–∞–ª–∞–Ω—Å–µ—Ä–∞...")
        print(f"üîç –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –º–æ–¥–µ–ª–∏: {model_path}")
        print(f"üîç –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –º–æ–¥–µ–ª–∏: {os.path.abspath(model_path)}")
        print(f"üîç –ú–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(model_path)}")
        
        # –ò–º–ø–æ—Ä—Ç MLBalancer –∑–¥–µ—Å—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from models.neural_network import MLBalancer as MLBalancerClass
        print("‚úÖ –ö–ª–∞—Å—Å MLBalancer –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        if os.path.exists(model_path):
            print(f"üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏–∑ {model_path}")
            ml_balancer = MLBalancerClass(model_path)
            print(f"‚úÖ –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("üì¶ –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å")
            ml_balancer = MLBalancerClass()
            print("‚úÖ –ù–µ–æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        print(f"üîç –û–±—ä–µ–∫—Ç ML –±–∞–ª–∞–Ω—Å–µ—Ä–∞: {ml_balancer}")
        print(f"üîç –¢–∏–ø ML –±–∞–ª–∞–Ω—Å–µ—Ä–∞: {type(ml_balancer)}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML –±–∞–ª–∞–Ω—Å–µ—Ä–∞: {str(e)}")
        import traceback
        print(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        ml_balancer = None

# –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
initialize_ml_balancer()

@app.route('/health', methods=['GET'])
def health_check():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    print(f"üè• –í—ã–∑–≤–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    print(f"üîç –°—Ç–∞—Ç—É—Å ml_balancer: {ml_balancer}")
    print(f"üîç ml_balancer –Ω–µ —Ä–∞–≤–µ–Ω None: {ml_balancer is not None}")
    print(f"üîç model_path —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(model_path)}")
    
    return jsonify({
        "status": "healthy" if ml_balancer is not None else "unhealthy",
        "service": "ML Balancer",
        "model_loaded": ml_balancer is not None,
        "trained_model_available": os.path.exists(model_path),
        "model_path": model_path,
        "current_dir": os.getcwd()
    })

@app.route('/predict', methods=['POST'])
def predict():
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–µ—à–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏"""
    try:
        print("üîç –í—ã–∑–≤–∞–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç predict")
        data = request.json
        print(f"üì® –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML –±–∞–ª–∞–Ω—Å–µ—Ä–∞
        if ml_balancer is None:
            print("‚ùå ML –±–∞–ª–∞–Ω—Å–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return jsonify({
                "error": "ML balancer not initialized",
                "isNeedIntervene": False
            }), 500
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞
        print("üìã –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞...")
        request_data = parse_prediction_request(data)
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –ø–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
        print("üß† –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞...")
        prediction = ml_balancer.predict_with_fallback(
            request_data.parametersSettings,
            request_data.modelsParameters
        )
        print(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω: {prediction}")
        
        # –í–æ–∑–≤—Ä–∞—Ç –æ—Ç–≤–µ—Ç–∞
        response = {
            "isNeedIntervene": prediction.isNeedIntervene,
            "sendingModelId": prediction.sendingModelId,
            "acceptingModelId": prediction.acceptingModelId,
            "confidence": prediction.confidence,
            "method": "ML" if prediction.confidence >= 0.7 else "Traditional"
        }
        print(f"üì§ –í–æ–∑–≤—Ä–∞—Ç –æ—Ç–≤–µ—Ç–∞: {response}")
        return jsonify(response)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ predict: {str(e)}")
        print(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        import traceback
        print(f"‚ùå –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        
        return jsonify({
            "error": str(e),
            "error_type": type(e).__name__,
            "isNeedIntervene": False
        }), 500

@app.route('/train', methods=['POST'])
def train():
    """–û–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–∏ —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        data = request.json
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ–±—É—á–µ–Ω–∏—è
        training_service = TrainingService(model_path)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if 'training_data' in data:
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            training_data = []
            for item in data['training_data']:
                solution = training_service._parse_network_solution(item)
                training_data.append(solution)
        else:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            num_samples = data.get('num_samples', 1000)
            print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {num_samples} —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            training_data = training_service.generate_synthetic_data(num_samples)
        
        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        epochs = data.get('epochs', 50)
        batch_size = data.get('batch_size', 32)
        
        history = training_service.train(
            training_data, 
            epochs=epochs, 
            batch_size=batch_size
        )
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        initialize_ml_balancer()
        
        return jsonify({
            "message": "Training completed successfully",
            "history": history,
            "model_saved": True
        })
        
    except Exception as e:
        return jsonify({
            "error": str(e),
            "message": "Training failed"
        }), 500

@app.route('/train/synthetic', methods=['POST'])
def train_synthetic():
    """–û–±—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        data = request.json or {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ–±—É—á–µ–Ω–∏—è
        training_service = TrainingService(model_path)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        num_samples = data.get('num_samples', 1000)
        epochs = data.get('epochs', 50)
        batch_size = data.get('batch_size', 32)
        
        print(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {num_samples} —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        training_data = training_service.generate_synthetic_data(num_samples)
        
        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        history = training_service.train(
            training_data, 
            epochs=epochs, 
            batch_size=batch_size
        )
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        initialize_ml_balancer()
        
        return jsonify({
            "message": "Training with synthetic data completed successfully",
            "samples_generated": num_samples,
            "epochs": epochs,
            "history": history,
            "model_saved": True
        })
        
    except Exception as e:
        return jsonify({
            "error": str(e),
            "message": "Training failed"
        }), 500

@app.route('/model/status', methods=['GET'])
def model_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏"""
    return jsonify({
        "model_loaded": ml_balancer is not None,
        "trained_model_available": os.path.exists(model_path),
        "model_path": model_path,
        "model_parameters": get_model_info() if ml_balancer else None
    })

def get_model_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏"""
    if ml_balancer and ml_balancer.model:
        total_params = sum(p.numel() for p in ml_balancer.model.parameters())
        trainable_params = sum(p.numel() for p in ml_balancer.model.parameters() if p.requires_grad)
        
        return {
            "total_parameters": total_params,
            "trainable_parameters": trainable_params,
            "model_type": "LoadBalancerNN"
        }
    return None

def parse_prediction_request(data: Dict[str, Any]) -> MLPredictionRequest:
    """–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ JSON"""
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    params_settings = ParametersSettings(
        criticalLoadFactor=data['parametersSettings']['criticalLoadFactor'],
        criticalPacketLost=data['parametersSettings']['criticalPacketLost'],
        criticalPing=data['parametersSettings']['criticalPing'],
        criticalJitter=data['parametersSettings']['criticalJitter']
    )
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–µ–π
    models_params = []
    for model_data in data['modelsParameters']:
        model = ModelParameters(
            id=model_data['id'],
            loadFactor=model_data['loadFactor'],
            packetLost=model_data['packetLost'],
            ping=model_data['ping'],
            jitter=model_data['jitter'],
            CPU=model_data.get('CPU', 0.0),
            usedDiskSpace=model_data.get('usedDiskSpace', 0.0),
            memoryUsage=model_data.get('memoryUsage', 0.0),
            networkTraffic=model_data.get('networkTraffic', 0.0)
        )
        models_params.append(model)
    
    return MLPredictionRequest(
        parametersSettings=params_settings,
        modelsParameters=models_params
    )

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML –±–∞–ª–∞–Ω—Å–µ—Ä–∞
    initialize_ml_balancer()
    
    # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.run(host='0.0.0.0', port=5001, debug=True) 