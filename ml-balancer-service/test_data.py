#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ ML –±–∞–ª–∞–Ω—Å–µ—Ä–∞
"""

import requests
import json
import time

# –ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
test_examples = [
    {
        "name": "–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª—å 1",
        "data": {
            "parametersSettings": {
                "criticalLoadFactor": 1.0,
                "criticalPacketLost": 0.1,
                "criticalPing": 100,
                "criticalJitter": 20
            },
            "modelsParameters": [
                {
                    "id": "model_1",
                    "loadFactor": 1.2,  # –í—ã—à–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ
                    "packetLost": 0.05,
                    "ping": 50,
                    "jitter": 10,
                    "CPU": 0.8,
                    "usedDiskSpace": 0.6,
                    "memoryUsage": 0.9,
                    "networkTraffic": 0.85
                },
                {
                    "id": "model_2",
                    "loadFactor": 0.4,  # –ù–∏–∂–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ
                    "packetLost": 0.02,
                    "ping": 30,
                    "jitter": 5,
                    "CPU": 0.3,
                    "usedDiskSpace": 0.2,
                    "memoryUsage": 0.4,
                    "networkTraffic": 0.35
                }
            ]
        }
    },
    {
        "name": "–ü—Ä–æ–±–ª–µ–º—ã QoS –º–æ–¥–µ–ª—å 3",
        "data": {
            "parametersSettings": {
                "criticalLoadFactor": 1.0,
                "criticalPacketLost": 0.1,
                "criticalPing": 100,
                "criticalJitter": 20
            },
            "modelsParameters": [
                {
                    "id": "model_1",
                    "loadFactor": 0.8,
                    "packetLost": 0.05,
                    "ping": 45,
                    "jitter": 8,
                    "CPU": 0.6,
                    "usedDiskSpace": 0.4,
                    "memoryUsage": 0.7,
                    "networkTraffic": 0.6
                },
                {
                    "id": "model_2",
                    "loadFactor": 0.6,
                    "packetLost": 0.03,
                    "ping": 35,
                    "jitter": 6,
                    "CPU": 0.4,
                    "usedDiskSpace": 0.3,
                    "memoryUsage": 0.5,
                    "networkTraffic": 0.45
                },
                {
                    "id": "model_3",
                    "loadFactor": 0.9,
                    "packetLost": 0.15,  # –í—ã—à–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ
                    "ping": 150,         # –í—ã—à–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ
                    "jitter": 25,        # –í—ã—à–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ
                    "CPU": 0.85,
                    "usedDiskSpace": 0.7,
                    "memoryUsage": 0.8,
                    "networkTraffic": 0.9
                }
            ]
        }
    },
    {
        "name": "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
        "data": {
            "parametersSettings": {
                "criticalLoadFactor": 1.0,
                "criticalPacketLost": 0.1,
                "criticalPing": 100,
                "criticalJitter": 20
            },
            "modelsParameters": [
                {
                    "id": "model_1",
                    "loadFactor": 0.7,
                    "packetLost": 0.04,
                    "ping": 40,
                    "jitter": 8,
                    "CPU": 0.5,
                    "usedDiskSpace": 0.3,
                    "memoryUsage": 0.6,
                    "networkTraffic": 0.55
                },
                {
                    "id": "model_2",
                    "loadFactor": 0.6,
                    "packetLost": 0.03,
                    "ping": 35,
                    "jitter": 6,
                    "CPU": 0.4,
                    "usedDiskSpace": 0.25,
                    "memoryUsage": 0.5,
                    "networkTraffic": 0.45
                },
                {
                    "id": "model_3",
                    "loadFactor": 0.65,
                    "packetLost": 0.035,
                    "ping": 38,
                    "jitter": 7,
                    "CPU": 0.45,
                    "usedDiskSpace": 0.28,
                    "memoryUsage": 0.55,
                    "networkTraffic": 0.5
                }
            ]
        }
    }
]

def test_ml_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —Å–µ—Ä–≤–∏—Å–∞ —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    base_url = "http://localhost:5001"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    try:
        response = requests.get(f"{base_url}/health")
        if response.status_code == 200:
            print("‚úÖ ML —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"–°—Ç–∞—Ç—É—Å: {response.json()}")
        else:
            print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è ML —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ML —Å–µ—Ä–≤–∏—Å—É: {e}")
        return False
    
    print("\n" + "="*50)
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    print("="*50)
    
    for example in test_examples:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {example['name']}")
        print("-" * 30)
        
        try:
            response = requests.post(
                f"{base_url}/predict",
                json=example['data'],
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"–†–µ—à–µ–Ω–∏–µ: {'‚úÖ –í–º–µ—à–∞—Ç—å—Å—è' if result['isNeedIntervene'] else '‚ùå –ù–µ –≤–º–µ—à–∏–≤–∞—Ç—å—Å—è'}")
                if result['isNeedIntervene']:
                    print(f"–û—Ç: {result['sendingModelId']} ‚Üí –ö: {result['acceptingModelId']}")
                    print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2%}")
                    print(f"–ú–µ—Ç–æ–¥: {result['method']}")
                else:
                    print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2%}")
                    print(f"–ú–µ—Ç–æ–¥: {result['method']}")
            else:
                print(f"‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è: {response.status_code}")
                print(response.text)
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    return True

def generate_training_data():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    base_url = "http://localhost:5001"
    
    print("\n" + "="*50)
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("="*50)
    
    training_config = {
        "num_samples": 500,
        "epochs": 30,
        "batch_size": 16
    }
    
    try:
        response = requests.post(
            f"{base_url}/train/synthetic",
            json=training_config,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print(f"–û–±—Ä–∞–∑—Ü—ã: {result['samples_generated']}")
            print(f"–≠–ø–æ—Ö–∏: {result['epochs']}")
            print(f"–ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {result['model_saved']}")
        else:
            print(f"‚ùå –û–±—É—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {response.status_code}")
            print(response.text)
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ ML –±–∞–ª–∞–Ω—Å–µ—Ä–∞")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    if test_ml_service():
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        user_input = input("\n–•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ? (y/n): ")
        if user_input.lower() == 'y':
            generate_training_data()
    else:
        print("\n‚ùå –¢–µ—Å—Ç—ã –Ω–µ —É–¥–∞–ª–∏—Å—å!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ML —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω: python run.py run")

if __name__ == "__main__":
    main() 